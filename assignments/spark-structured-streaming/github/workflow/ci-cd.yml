name: CI/CD

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

env:
  ENVIRONMENT: dev # Set the default environment to 'dev'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run linting
        run: pylint src

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python -m pytest tests/

  deploy:
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    env:
      ENVIRONMENT: ${{ env.ENVIRONMENT }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install AWS CLI
        run: |
          pip install awscli
      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.$AWS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key AWS_ACCESS_KEY
          aws configure set aws_secret_key $AWS_SECRET_KEY
          aws configure set default.region $AWS_REGION
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Build and run Docker Compose
        run: |
          docker-compose -f docker-compose.${{ env.ENVIRONMENT }}.yml build
          docker-compose -f docker-compose.${{ env.ENVIRONMENT }}.yml up -d
      - name: Test Airflow DAG
        run: |
          # Wait for Airflow to start
          sleep 60
          # Test your Airflow DAG here, e.g., trigger it manually
          docker-compose -f docker-compose.${{ env.ENVIRONMENT }}.yml exec airflow airflow dags trigger recipe_etl