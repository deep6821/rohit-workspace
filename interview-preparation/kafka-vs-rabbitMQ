Kafka vs RabbitMQ
-----------------
-----------------

1. Distribution and parallelism:

Kafka: distributes consumers by topic partitions. Each consumer from the group is assigned to one partition.
The partition mechanism can be used to send different sets of messages by business
keys (e.g., location or user ID).

In RabbitMQ: the number of consumers can be scaled out, which means that each queue instance will have
many consumers. This makes message processing spread to all active consumers, but a message can only be
processed once.

2. High Availability:
Both frameworks are highly available. However, Kafka has an edge as it uses Zookeeper to manage the state
of the cluster. A Zookeeper keeps track of the status of Kafka cluster nodes, Kafka topics, partitions, etc.

3. Performance:
Kafka: supports the strength of sequential disk I/O and requires less hardware. This leads to a high
throughput - several millions of messages per second - with a tiny number of nodes.

RabbitMQ: can also process a million messages per second but it requires above 30 nodes.

4. Replication:
Kafka: has replicated the broker by design. This means that if the master broker is down, all the work is
automatically passed to another broker which has a full replica of the dead one; hence, no message is
ever lost.

In RabbitMQ: queues aren’t automatically replicable.

5. Message ordering
Since Kafka has partitions, messages can be received by ordering. This can’t be achieved in RabbitMQ.

6. Multi subscriber
In Kafka: a message can be subscribed by multiple consumers.
In RabbitMQ: a message can only be consumed once, and once it is consumed, the message disappears and
becomes inaccessible.

7. Message protocols
Kafka: supports primitives (int8, int16, int32, int64, string, arrays) and binary messages.
RabbitMQ: supports almost all standard queue protocols like AMQP, STOMP, HTTP, and MQTT.

8. Message lifetime
Since Kafka is a log, messages are always there. RabbitMQ is a queue that removes messages once they are
consumed.

9. Message acknowledgment
Both frameworks give confirmation to the producer when messages arrive in the topic/queue.

10. Flexible routing to a topic/queue
In Kafka, a message is sent to the topic by a key; however, in RabbitMQ, there are more options
(e.g., sending a message using regular expressions).



