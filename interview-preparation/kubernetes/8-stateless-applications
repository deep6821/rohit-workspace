Stateless Applications: Exposing an External IP Address to Access an Application in a Cluster
Ex: Deploying PHP Guestbook application with Redis

Objectives:
-----------
- Run five instances of a Hello World application.
- Create a Service object that exposes an external IP address.
- Use the Service object to access the running application.

Creating a service for an application running in five pods:
-----------------------------------------------------------
1. Run a Hello World application in your cluster:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: load-balancer-example
  name: hello-world
spec:
  replicas: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: load-balancer-example
  template:
    metadata:
      labels:
        app.kubernetes.io/name: load-balancer-example
    spec:
      containers:
      - image: gcr.io/google-samples/node-hello:1.0
        name: hello-world
        ports:
        - containerPort: 8080

Command to create a Deployment and an associated ReplicaSet. The ReplicaSet has five Pods each of which
runs the Hello World application: kubectl apply -f https://k8s.io/examples/service/load-balancer-example.yaml

2. Display information about the Deployment:
kubectl get deployments hello-world
kubectl describe deployments hello-world

3. Display information about your ReplicaSet objects:
kubectl get replicasets
kubectl describe replicasets

4. Create a Service object that exposes the deployment:
kubectl expose deployment hello-world --type=LoadBalancer --name=my-service

5. Display information about the Service:
kubectl get services my-service
The output is similar to:
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)    AGE
my-service   LoadBalancer   10.3.245.137   104.198.205.71   8080/TCP   54s

6. Display detailed information about the Service:
kubectl describe services my-service: The output is similar to
Name:           my-service
Namespace:      default
Labels:         app.kubernetes.io/name=load-balancer-example
Annotations:    <none>
Selector:       app.kubernetes.io/name=load-balancer-example
Type:           LoadBalancer
IP:             10.3.245.137
LoadBalancer Ingress:   104.198.205.71
Port:           <unset> 8080/TCP
NodePort:       <unset> 32377/TCP
Endpoints:      10.0.0.6:8080,10.0.1.6:8080,10.0.1.7:8080 + 2 more...
Session Affinity:   None
Events:         <none>

Make a note of the external IP address (LoadBalancer Ingress) exposed by your service. In this example, the external IP address is 104.198.205.71. Also note the value of Port and NodePort. In this example, the Port is 8080 and the NodePort is 32377.

7. In the preceding output, you can see that the service has several endpoints: 10.0.0.6:8080,
10.0.1.6:8080,10.0.1.7:8080 + 2 more. These are internal addresses of the pods that are running the
Hello World application. To verify these are pod addresses, enter this command:
kubectl get pods --output=wide

8. Use the external IP address (LoadBalancer Ingress) to access the Hello World application:
curl http://<external-ip>:<port>
where <external-ip> is the external IP address (LoadBalancer Ingress) of your Service, and <port> is the
value of Port in your Service description. If you are using minikube, typing minikube service my-service
will automatically open the Hello World application in a browser.

**********************************************************************************************************
To delete the Service, enter this command: kubectl delete services my-service
To delete the Deployment, the ReplicaSet, and the Pods that are running the Hello World application,
enter this command: kubectl delete deployment hello-world



