Greedy is an algorithmic paradigm in which the solution is built piece by piece.
The next piece that offers the most obvious and immediate benefit is chosen.
The greedy approach will always make the choice that will maximize the profit
and minimize the cost at any given point. It means that a locally-optimal choice
is made in the hope that it will lead to a globally-optimal solution.

A real life example:
--------------------
Imagine you just got a new piggy bank to save some money for your college
admission. The bank is small and can only contain a fixed weight. Each item can
only be added once. You’ve got to be smart and choose the maximum value vs
weight ratio for putting anything into it.

This is also called the fractional knapsack problem. The local optimal strategy
is to choose the item that has maximum value vs weight ratio. This strategy also
leads to a globally-optimal solution because we are allowed to take fractions
of an item.

How to make the optimal choice?
-------------------------------
The Greedy algorithm has only one shot to compute the optimal solution. It can
never go back and reverse the decision. Hence, the algorithm makes greedy
choices at each step to ensure that the objective function is optimizedoptimized.

Shortest path finding problem:
-------------------------------------------------------------------------------


Advantages:
-----------
Easy to devise: It is easier to come up with a greedy approach (or even multiple greedy algorithms)
for a single problem than computing solutions via other ways like binary search, dynamic or functional
programming.

Compute the running time complexity: Analyzing the run time for greedy algorithms will generally
be simpler than other techniques like traversals of trees, graph algorithms or divide & conquer.
For the divide and conquer method, it is not clear whether the technique is fastfast or slowslow?
It is because, at each recursion call, the size of the problem shrinks, while the number of
subproblems increases.

Disadvantages:
--------------
Un-optimized solution: One of the major disadvantages of the ‘greedy’ approach is that initially,
you might take a smaller step that leads to one big step that costs the maximum. And hence, the
final solution can never be optimized. (Explained in the example above.)

Proof of correctness: For greedy algorithms, it is harder to understand the correctness issues of a
solution. Even with the correct algorithm, it is hard to prove why it is correct. While proving the
correctness of a greedy algorithm, it requires a good deal of effort and patience. Moreover, the
methods like proof of correctness via contradiction are used for this purpose.
