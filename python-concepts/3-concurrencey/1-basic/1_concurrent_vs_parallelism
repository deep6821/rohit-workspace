Serial Execution:
-----------------
- When programs are serially executed, they are scheduled one at a time on the
  CPU. Once a task gets completed, the next one gets a chance to run. Each task
  is run from beginning to end without interruption. The analogy for serial
  execution is a circus juggler who can only juggle one ball at a time.
  Definitely not very entertaining!


------------------------------------------------------------------------------
Simultaneously and Parallelism English Def: The fact of two or more events or
circumstances happening or existing at the same time.
------------------------------------------------------------------------------


Concurrency:
------------
- A concurrent program is one that can be decomposed into constituent parts and
  each part can be executed out of order or in partial order without affecting
  the final outcome.
- A system capable of running several distinct programs or more than one
  independent unit of the same program in overlapping time intervals is called
  a concurrent system.
- The execution of two programs or units of the same program may not happen
  simultaneously.

- A concurrent system can have two programs in progress at the same time where
  progress doesn't imply execution. One program can be suspended while the other
  executes. Both programs are able to make progress as their execution is
  interleaved. In concurrent systems, the goal is to maximize throughput and
  minimize latency.

For example, a browser running on a single core machine has to be responsive to
user clicks but also be able to render HTML on screen as quickly as possible.
Concurrent systems achieve lower latency and higher throughput when programs
running on the system require frequent network or disk I/O.

- The classic example of a concurrent system is that of an operating system
  running on a single core machine. Such an operating system is concurrent but
  not parallel. It can only process one task at any given point, but all the
  tasks being managed by the operating system appear to make progress because
  the operating system is designed for concurrency. Each task gets a slice of
  CPU time to execute and move forward.

- Going back to our circus analogy, a concurrent juggler is one who can juggle
  several balls at the same time. However, at any one point in time, he can only
  have a single ball in his hand while the rest are in flight. Each ball gets a
  time slice during which it lands in the juggler's hand and then is thrown
  back up. A concurrent system is in a similar sense juggling several processes
  at the same time.

** Achieve Concurrency in Python: 1. Multithreading 2. Async IO

** Concurrency-->(Not when we're doing things in parallel at the exact same
                 time but when we're doing things in different timing sequences
                 so we can have multiple threads running at the same time and
                 our 1-CPU core that we're running this these threads on is
                 switching between these threads in it's execution chain)

              OR
              (A system is said to be concurrent if it can support two or more
              actions in progress at the same time)


Parallelism:
-----------
- A parallel system is one which necessarily has the ability to execute multiple
  programs at the same time. Usually, this capability is aided by hardware in
  the form of multicore processors on individual machines or as computing
  clusters where several machines are hooked up to solve independent pieces of
  a problem simultaneously.
- Remember an individual problem has to be concurrent in nature, that is,
  portions of it can be worked on independently without affecting the final
  outcome before it can be executed in parallel.

- In parallel systems, the emphasis is on increasing throughput and optimizing
  usage of hardware resources. The goal is to extract out as much computation
  speedup as possible. Example problems include matrix multiplication, 3D
  rendering, data analysis, and particle simulation.

- Revisiting our juggler analogy, a parallel system would map to at least two
  or more jugglers juggling one or more balls. In the case of an operating system,
  if it runs on a machine with say four CPUs, then the operating system can execute
  four tasks at the same time, making execution parallel. Either a single (large)
  problem can be executed in parallel or distinct programs can be executed in
  parallel on a system supporting parallel execution.


*** Achieve Parallelism in Python: Multiprocessing

*** Parallelism --> (If we have multiple things happening at the exact same time
                     then that is a Parallelism operation)
                    OR
                    (A system is said to be parallel if it can support two or
                    more actions executing simultaneously)


Concurrency vs Parallelism:
---------------------------
From the above discussion it should be apparent that a concurrent system need
not be parallel, whereas a parallel system is indeed concurrent. Additionally,
a system can be both concurrent and parallel, e.g. a multitasking operating
system running on a multicore machine.


What is the difference between parallel programming and concurrent programming?
-------------------------------------------------------------------------------
1. A system is said to be concurrent if it can  A system is said to be parallel if it can support
support two or more actions in progress at the  two or more actions executing simultaneously.
same time.

2. In concurrent systems, multiple actions can  Meanwhile, multiple actions are simultaneously
be in progress (may not be executed) at the     executed in parallel systems
same time.

3. Concurrency is about dealing with lots of    Parallelism is about doing lots of things at once.
things at once.

4. An application can be concurrent — but not parallel, which means that it processes more than one task
at the same time, but no two tasks are executing at the same time instant.

An application can be parallel — but not concurrent, which means that it processes multiple sub-tasks
of a task in multi-core CPU at the same time.

5. An application can be neither parallel — nor concurrent, which means that it processes all tasks
one at a time, sequentially.

6. An application can be both parallel — and concurrent, which means that it processes multiple tasks
concurrently in multi-core CPU at the same time.


Summary:
We use python’s multiprocessing module to achieve parallelism whereas concurrency in Python is achieved
with the help of threading and Async IO modules .

A program running in parallel will be called as concurrent but the reverse is not true .

Example:
++++++++
Say you want to compress n text files and generate a compressed file for each of them. You can have
from 2 (up to n) threads that each handle compressing a subset of the files. When each thread is done,
it’s just done, it doesn’t have to wait or do anything else. So, since different tasks are performed in
an interleaved manner in “any arbitrary order” the program is concurrent but not parallel.