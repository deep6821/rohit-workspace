Programs, processes, and threads:
--------------------------------

Programs: Operating systems today can run multiple programs at the same time. For example, you’re reading
this article in your browser (a program) but you can also listen to music on your media player (another program).

Processes: Processes are what actually execute the program. Each process is able to run concurrent subtasks
called threads.

Threads: Threads are sub-tasks of processes and if synchronized correctly can give the illusion that your
application is performing everything at once. Without threads you would have to write one program per task,
run them as processes and synchronize them through the operating system.

-----------------------------------------------------------------------------------------------------------
Context Switching:
----------------- Context switching is the technique where CPU time is shared across all running processes
and is key for multitasking.

Thread Pools:
------------ Thread pools allow you to decouple task submission and execution. You have the option of
exposing an executor’s configuration while deploying an application or switching one executor for another
seamlessly.

A thread pool consists of homogenous worker threads that are assigned to execute tasks. Once a worker thread
finishes a task, it is returned to the pool. Usually, thread pools are bound to a queue from which tasks are
dequeued for execution by worker threads.

A thread pool can be tuned for the size of the threads it holds. A thread pool may also replace a thread if
it dies of an unexpected exception. Using a thread pool immediately alleviates from the ails of manual
creation of threads. Important notes about thread pools:

a) There’s no latency when a request is received and processed by a thread because no time is lost in
creating a thread.

b) The system will not go out of memory because threads are not created without any limits

c) Fine tuning the thread pool will allow us to control the throughput of the system. We can have enough
threads to keep all processors busy but not so many as to overwhelm the system.

d) The application will degrade gracefully if the system is under load.

Locking:
------- Locks are a very important feature that make multithreading possible. Locks are a synchronization
technique used to limit access to a resource in an environment where there are many threads of execution.
A good example of a lock is a mutex.

Mutex:
------ Mutex as the name hints implies mutual exclusion. A mutex is used to guard shared data such as a
linked-list, an array or any simple primitive type. A mutex allows only a single thread to access a resource.

Thread Safety:
------------- Thread safety is a concept that means different threads can access the same resources without
exposing erroneous behavior or producing unpredictable results like a race condition or a deadlock.
Thread safety can be achieved by using various synchronization techniques.

Deadlock:
-------- Deadlocks happen when two or more threads aren’t able to make any progress because the resource
required by the first thread is held by the second and the resource required by the second thread is held by
the first.

Race conditions:
--------------- Critical section is any piece of code that has the possibility of being executed
concurrently by more than one thread of the application and exposes any shared data or resources used by
the application for access.

Race conditions happen when threads run through critical sections without thread synchronization. The
threads “race” through the critical section to write or read shared resources and depending on the order in
which threads finish the “race”, the program output changes. In a race condition, threads access shared
resources or program variables that might be worked on by other threads at the same time causing the
application data to be inconsistent.

Starvation:
---------- Other than a deadlock, an application thread can also experience starvation, where it never gets
CPU time or access to shared resources because other “greedy” threads hog the resources.

Livelock:
-------- A livelock happens when two threads keep taking actions in response to the other thread instead of
making any progress. The best analogy is to think of two persons trying to cross each other in a hallway.
John moves to the left to let Arun pass, and Arun moves to his right to let John pass. Both block each other
now. John sees he’s now blocking Arun and moves to his right and Arun moves to his left seeing he’s blocking
John. They never cross each other and keep blocking each other. This scenario is an example of a livelock.